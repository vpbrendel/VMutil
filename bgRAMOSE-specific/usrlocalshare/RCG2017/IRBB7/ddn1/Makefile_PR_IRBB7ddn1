#Makefile_PR-LABEL
#

#We need to set some variables here for make to find the relevant binaries:
#
SRCDIR            = /usr/local/src
SRATOOLKIT        = ${SRCDIR}/BWASP/SRATOOLKIT/sratoolkit.2.8.2-1-ubuntu64/bin
FASTQC            = ${SRCDIR}/BWASP/FASTQC/FastQC
TRIMMOMATIC       = ${SRCDIR}/TRegGA/TRIMMOMATIC/Trimmomatic-0.36/trimmomatic-0.36.jar
ADAPTORS          = ${SRCDIR}/TRegGA/TRIMMOMATIC/Trimmomatic-0.36/adapters
NGSUTILS          = ${SRCDIR}/TRegGA/ngsutils/bin


#Usage:
#
#  make -j X -f Makefile_PR-LABEL >& err
#
#where X is the number of processors to be used.

#Optional clean-up:
#
#  make -f Makefile_PR-LABEL cleanup

#Please be careful while editing the Makefile as it is 'tab-sensitive'.
#Typical customization should only involve apppropriate editing of the variables in the next section.

##########################Variable Settings#####################################
###
#

SYNONYM           = IRBB7ddn1#  Replace LABEL with an appropriate cultivar name; here IRBB7ddn1
ACCESSIONS        = ${SYNONYM}-001 ${SYNONYM}-002 ${SYNONYM}-003 ${SYNONYM}-004 ${SYNONYM}-005 ${SYNONYM}-006

READ1FILES       := ${ACCESSIONS:%=%_1.fastq.gz}
READ2FILES       := ${ACCESSIONS:%=%_2.fastq.gz}

#
# FASTQC
FASTQC_OPTIONS    = --threads ${FQO-t} --extract
#
FQO-t             = 2#  number of files which can be processed simultaneously.

#
# TRIMMOMATIC options are explained in detail at http://www.usadellab.org/cms/index.php?page=trimmomatic
#  and the linked manual.
#  Here we show use of five Trimmomatic steps (in that order); to omit a step, leave the corresponding
#  varible blank.
#
TRIMMOMATIC_STEPS =  ${ILLUMINACLIP} ${LEADING} ${SLIDINGWINDOW} ${TRAILING} ${MINLEN} 
ILLUMINACLIP      = ILLUMINACLIP:${TMO-a}:${TMO-i}#    Cut adapter and other illumina-specific sequences from the read.
LEADING           = LEADING:${TMO-m}#                  Cut bases off the start of a read, if below a threshold quality.
SLIDINGWINDOW     = SLIDINGWINDOW:${TMO-w}:${TMO-m}#   Performs a sliding window trimming approach. It starts scanning
#                                                       at the 5â€Ÿ end and clips the read once the average quality within
#                                                       the window falls below a threshold. 
TRAILING          = TRAILING:${TMO-m}#                 Cut bases off the end of a read, if below a threshold quality.
MINLEN            = MINLEN:${TMO-l}#                   Drop the read if it is below a specified length.


#
TMO-p      =                   -phred33#   [-phred33 | -phred64]: using phred + 33 or phred + 64 quality scores
TMO-t      =                          8#   number of threads
TMO-a      =  ${ADAPTORS}/TruSeq2-PE.fa#   ILLUMINACLIP path to a fasta file containing all the adapters, PCR sequences etc.
TMO-i      =                    2:30:15#   ILLUMINACLIP <seed mismatches>:<palindrome clip threshold>:<simple clip threshold>
TMO-w      =                          6#   number of bases to average across
TMO-m      =                         20#   minimum quality required to keep a base
TMO-l      =                        200#   minimum length of reads to be kept


################################################################################
### ! Typically there would be no need for further editing below this line ! ###
##
#

##########################Makefile Execution####################################
###
##
#

CLEAN1P             := ${READ1FILES:%_1.fastq.gz=%_clean_1.fq.gz}
CLEAN2P             := ${READ2FILES:%_2.fastq.gz=%_clean_2.fq.gz}
CLEAN1U             := ${READ1FILES:%_1.fastq.gz=%_clean_unpaired_1.fq.gz}
CLEAN2U             := ${READ2FILES:%_2.fastq.gz=%_clean_unpaired_2.fq.gz}
CLEANREADS           = ${CLEAN1P} ${CLEAN2P} ${CLEAN1U} ${CLEAN2U}

QUALCHKB1           := ${READ1FILES:%_1.fastq.gz=FastQCb/%_1_fastqc/fastqc_data.txt}
QUALCHKB2           := ${READ2FILES:%_2.fastq.gz=FastQCb/%_2_fastqc/fastqc_data.txt}

QUALCHKA1            = FastQCa/${SYNONYM}_1.fastqc/fastqc_data.txt
QUALCHKA2            = FastQCa/${SYNONYM}_2.fastqc/fastqc_data.txt

#
all:	fastqcb ${CLEANREADS} trimmedreads readsasfasta fastqca ${SYNONYM}gr_1.fq

.PHONY:	show

show:	
	@echo ""
	@echo "Show variables {for debugging; invoke with make -f Makefile_PR-orig show}:"
	@echo ""
	@echo ${READ1FILES}
	@echo ${CLEANREADS}
	@echo ""
	@echo ${QUALCHKB1}
	@echo ""



## 2. FastQC before ("B") trimming:
#
fastqcb:	FastQCbdir ${QUALCHKB1} ${QUALCHKB2}

FastQCbdir:	
ifeq ("$(wildcard ./FastQCb)","")
	mkdir FastQCb
endif

FastQCb/%_1_fastqc/fastqc_data.txt:	%_1.fastq.gz
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCb  $*_1.fastq.gz

FastQCb/%_2_fastqc/fastqc_data.txt:	%_2.fastq.gz
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCb  $*_2.fastq.gz


## 3. Adapter removal and quality trimming with Trimmomatic:
#
%_clean_1.fq.gz %_clean_2.fq.gz %_clean_unpaired_1.fq.gz %_clean_unpaired_2.fq.gz:	%_1.fastq.gz %_2.fastq.gz
	java -jar ${TRIMMOMATIC} PE ${TMO-p} -threads ${TMO-t} \
		$*_1.fastq.gz $*_2.fastq.gz \
		$*_clean_1.fq.gz  $*_clean_unpaired_1.fq.gz $*_clean_2.fq.gz $*_clean_unpaired_2.fq.gz \
		${TRIMMOMATIC_STEPS}


## 4. Concatenate the trimmed reads:
#
trimmedreads:	${SYNONYM}_1.fq ${SYNONYM}_2.fq

${SYNONYM}_1.fq:	${CLEAN1P}
	gunzip -c *_clean_1.fq.gz > $@

${SYNONYM}_2.fq:	${CLEAN2P}
	gunzip -c *_clean_2.fq.gz > $@


## 5. Convert the trimmed reads from fastq to fasta format:
#
readsasfasta:	${SYNONYM}_1.fa ${SYNONYM}_2.fa

${SYNONYM}_1.fa:	${SYNONYM}_1.fq
	${NGSUTILS}/fastqutils tofasta ${SYNONYM}_1.fq > ${SYNONYM}_1.fa
	
${SYNONYM}_2.fa:	${SYNONYM}_2.fq
	${NGSUTILS}/fastqutils tofasta ${SYNONYM}_2.fq > ${SYNONYM}_2.fa


## 6. FastQC after ("A") trimming:
#
fastqca:	FastQCadir ${QUALCHKA1} ${QUALCHKA2}

FastQCadir:	
ifeq ("$(wildcard ./FastQCa)","")
	mkdir FastQCa
endif

FastQCa/%_1.fastqc/fastqc_data.txt:	%_1.fq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCa  $*_1.fq

FastQCa/%_2.fastqc/fastqc_data.txt:	%_2.fq
	${FASTQC}/fastqc  ${FASTQC_OPTIONS}  --outdir=FastQCa  $*_2.fq


## 7. Filter for properly overlapping DiscovarDeNovo read pairs:
#
${SYNONYM}gr_1.fq:	${SYNONYM}_1.fq ${SYNONYM}_2.fq
	/usr/bin/python /usr/local/src/NGS_DIR/DDNscripts/mergefq.py ${SYNONYM}_1.fq ${SYNONYM}_2.fq ${SYNONYM} 1000000; \
	/usr/local/src/NGS_DIR/DDNscripts/xDdNfilter; \
	/usr/local/src/NGS_DIR/DDNscripts/xDdNfsummary ${SYNONYM} > summary


## 8. Cleanup: remove intermediate files that are no longer needed
#
cleanup:
	-\rm ${READ1FILES} ${READ2FILES} ${CLEANREADS}
	-\rm -rf DIR-${SYNONYM}-mergedreads-*
	-\rm ${SYNONYM}_1.fq ${SYNONYM}_1.fa ${SYNONYM}nu_1.fq ${SYNONYM}_2.fq ${SYNONYM}_2.fa ${SYNONYM}nu_2.fq
